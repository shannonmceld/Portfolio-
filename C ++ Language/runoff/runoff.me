Let’s take a look at runoff.c. We’re defining two constants: MAX_CANDIDATES for the maximum number of candidates in the election, 
and MAX_VOTERS for the maximum number of voters in the election.

Next up is a two-dimensional array preferences. The array preferences[i] will represent all of the preferences for voter number i, a
nd the integer preferences[i][j] here will store the index of the candidate who is the jth preference for voter i.

Next up is a struct called candidate. Every candidate has a string field for their name, and int representing the number of votes they currently have,
and a bool value called eliminated that indicates whether the candidate has been eliminated from the election. The array candidates will keep track of all of the candidates in the election.

The program also has two global variables: voter_count and candidate_count.

Now onto main. Notice that after determining the number of candidates and the number of voters, the main voting loop begins, 
giving every voter a chance to vote. As the voter enters their preferences, the vote function is called to keep track of all of the preferences. 
If at any point, the ballot is deemed to be invalid, the program exits.

Once all of the votes are in, another loop begins: this one’s going to keep looping through the runoff process of checking for a winner and eliminating the last 
place candidate until there is a winner.

The first call here is to a function called tabulate, which should look at all of the voters’ preferences and compute the current vote totals, 
by looking at each voter’s top choice candidate who hasn’t yet been eliminated. Next, the print_winner function should print out the winner 
if there is one; if there is, the program is over. But otherwise, the program needs to determine the fewest number of votes anyone still in the 
election received (via a call to find_min). If it turns out that everyone in the election is tied with the same number of votes (as determined by the is_tie function), 
the election is declared a tie; otherwise, the last-place candidate (or candidates) is eliminated from the election via a call to the eliminate function.

If you look a bit further down in the file, you’ll see that these functions — vote, tabulate, print_winner, find_min, is_tie, and eliminate — are all left to up to you to complete!

Complete the implementation of runoff.c in such a way that it simulates a runoff election. 
You should complete the implementations of the vote, tabulate, print_winner, find_min, is_tie, and eliminate functions, 
and you should not modify anything else in runoff.c (and the inclusion of additional header files, if you’d like).

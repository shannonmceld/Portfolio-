Understanding
Theoretically, on input of size n, an algorithm with a running time of n is “asymptotically equivalent,” in terms of O, to an algorithm with a running time of 2n. 
Indeed, when describing the running time of an algorithm, we typically focus on the dominant term. 
In the real world, though, the fact of the matter is that 2n feels twice as slow as n.

The challenge ahead of you is to implement the fastest spell checker you can! By “fastest,” though, we’re talking actual “wall-clock,” not asymptotic, time.

In speller.c, put together a program that’s designed to spell-check a file after loading a dictionary of words from disk into memory. 
That dictionary, meanwhile, is implemented in a file called dictionary.c. 
The prototypes for the functions therein, meanwhile, are defined not in dictionary.c itself but in dictionary.h instead. 
That way, both speller.c and dictionary.c can #included

dictionary.c
Now open up dictionary.c. Notice how, atop the file, we’ve defined a struct called node that represents a node in a hash table. 
And declared a global pointer array, table, which will represent the hash table used to keep track of words in the dictionary. 
The array contains N node pointers, and we’ve set N equal to 26 for now, to match with the default hash function as described below. 

Next, notice that we’ve implemented load, check, size, and unload, but only barely, just enough for the code to compile. 
Notice too that we’ve implemented hash with a sample algorithm based on the first letter of the word. 
Re-implement those functions as cleverly as possible so that this spell checker works as advertised. And fast!

speller.c
Okay, next open up speller.c and spend some time looking over the code and comments therein. 
Notice how, by way of a function called getrusage, we’ll be “benchmarking” (i.e., timing the execution of) your implementations of check, load, size, and unload. 
Also notice how we go about passing check, word by word, the contents of some file to be spell-checked. Ultimately report each misspelling in that file along with a bunch of statistics.
